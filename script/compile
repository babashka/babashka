#!/usr/bin/env bash

set -eou pipefail

BABASHKA_XMX=${BABASHKA_XMX:-"-J-Xmx4500m"}

if [ -z "$GRAALVM_HOME" ]; then
    echo "Please set GRAALVM_HOME"
    exit 1
fi

BABASHKA_VERSION=$(cat resources/BABASHKA_VERSION)

BABASHKA_JAR=${BABASHKA_JAR:-"target/babashka-$BABASHKA_VERSION-standalone.jar"}

if [[ ! -f "$BABASHKA_JAR" ]]
then
    echo "Please run script/uberjar first."
    exit 1
fi

"$GRAALVM_HOME/bin/gu" install native-image

export JAVA_HOME=$GRAALVM_HOME
export PATH=$GRAALVM_HOME/bin:$PATH

rm -rf resources/*.class
# SVM_JAR=$(find -L "$GRAALVM_HOME" | grep svm.jar)
# "$GRAALVM_HOME/bin/javac" -cp "$SVM_JAR" resources/CutOffCoreServicesDependencies.java
# "$GRAALVM_HOME/bin/javac" -cp "$SVM_JAR" resources/CutOffSunAwtWwwContentAudioAiff.java
# "$GRAALVM_HOME/bin/javac" -cp "$SVM_JAR" resources/CutOffMisc.java

if [ -z "$BABASHKA_JAR" ]; then
    lein with-profiles +reflection,+native-image "do" run
    lein "do" clean, uberjar
    BABASHKA_JAR=${BABASHKA_JAR:-"target/babashka-$BABASHKA_VERSION-standalone.jar"}
fi

BABASHKA_BINARY=${BABASHKA_BINARY:-"bb"}

args=( "-jar" "$BABASHKA_JAR"
       "-H:Name=$BABASHKA_BINARY"
       "-H:+ReportExceptionStackTraces"
       "-J-Dborkdude.dynaload.aot=true"
       "-H:IncludeResources=BABASHKA_VERSION"
       "-H:IncludeResources=SCI_VERSION"
       "-H:ReflectionConfigurationFiles=reflection.json"
       "--initialize-at-build-time"
       #"-H:+PrintAnalysisCallTree"
       # "-H:+DashboardAll"
       # "-H:DashboardDump=reports/dump"
       # "-H:+DashboardPretty"
       # "-H:+DashboardJson"
       "-H:Log=registerResource:"
       "-H:EnableURLProtocols=http,https,jar"
       "--enable-all-security-services"
       "-H:+JNI"
       "--verbose"
       "--no-fallback"
       "--no-server"
       "--report-unsupported-elements-at-runtime"
       "--initialize-at-run-time=org.postgresql.sspi.SSPIClient"
       "--initialize-at-run-time=org.httpkit.client.ClientSslEngineFactory\$SSLHolder"
       "--native-image-info"
       "--verbose"
       "-H:ServiceLoaderFeatureExcludeServices=javax.sound.sampled.spi.AudioFileReader"
       "-H:ServiceLoaderFeatureExcludeServices=javax.sound.midi.spi.MidiFileReader"
       "-H:ServiceLoaderFeatureExcludeServices=javax.sound.sampled.spi.MixerProvider"
       "-H:ServiceLoaderFeatureExcludeServices=javax.sound.sampled.spi.FormatConversionProvider"
       "-H:ServiceLoaderFeatureExcludeServices=javax.sound.sampled.spi.AudioFileWriter"
       "-H:ServiceLoaderFeatureExcludeServices=javax.sound.midi.spi.MidiDeviceProvider"
       "-H:ServiceLoaderFeatureExcludeServices=javax.sound.midi.spi.SoundbankReader"
       "-H:ServiceLoaderFeatureExcludeServices=javax.sound.midi.spi.MidiFileWriter"
       "$BABASHKA_XMX" )

BABASHKA_STATIC=${BABASHKA_STATIC:-}

if [ "$BABASHKA_STATIC" = "true" ]; then
    args+=("--static" "--libc=musl")

    # needs to be in a separate script as we need sudo and >> redirects in it wont work.
    sudo bash script/setup-musl

    ZLIB_VERSION="1.2.11"

    curl -O -sL "https://zlib.net/zlib-${ZLIB_VERSION}.tar.gz"
    echo "c3e5e9fdd5004dcb542feda5ee4f0ff0744628baf8ed2dd5d66f8ca1197cb1a1 zlib-${ZLIB_VERSION}.tar.gz" | sha256sum --check
    tar xf "zlib-${ZLIB_VERSION}.tar.gz"
    cd "zlib-${ZLIB_VERSION}"
    CC=musl-gcc ./configure --static --prefix=/usr/lib/x86_64-linux-musl/
    make CC=musl-gcc
    sudo make install
    export CC=gcc
    cd ..

    # depending on GCC version, we will have different directories here.
    # for example, for GCC 6.3.0 we will have:
    # - /usr/lib/gcc/x86_64-linux-gnu/6
    # - /usr/lib/gcc/x86_64-linux-gnu/6.3.0
    for dest_dir in /usr/lib/gcc/x86_64-linux-gnu/*; do
        sudo cp -f /usr/lib/x86_64-linux-musl/lib/libz.a "$dest_dir"
    done
fi

BABASHKA_FEATURE_HSQLDB=${BABASHKA_FEATURE_HSQLDB:-}

if [ "$BABASHKA_FEATURE_HSQLDB" = "true" ]; then
    args+=("-H:IncludeResources=org/hsqldb/.*\.properties" "-H:IncludeResources=org/hsqldb/.*\.sql")
fi

BABASHKA_FEATURE_SELMER=${BABASHKA_FEATURE_SELMER:-}

if [ "$BABASHKA_FEATURE_SELMER" = "true" ]; then
    args+=("-H:IncludeResources=json.human.css")
fi

BABASHKA_LEAN=${BABASHKA_LEAN:-}

if [ "$BABASHKA_LEAN" = "true" ]
then
    # Remove all the default features, unless explicitly set to true:
    export BABASHKA_FEATURE_XML="${BABASHKA_FEATURE_XML:-false}"
    export BABASHKA_FEATURE_YAML="${BABASHKA_FEATURE_YAML:-false}"
    export BABASHKA_FEATURE_CORE_ASYNC="${BABASHKA_FEATURE_CORE_ASYNC:-false}"
    export BABASHKA_FEATURE_CSV="${BABASHKA_FEATURE_CSV:-false}"
    export BABAHSKA_FEATURE_TRANSIT="${BABAHSKA_FEATURE_TRANSIT:-false}"
    export BABASHKA_FEATURE_JAVA_TIME="${BABASHKA_FEATURE_JAVA_TIME:-false}"
    export BABASHKA_FEATURE_JAVA_NIO="${BABASHKA_FEATURE_JAVA_NIO:-false}"
    export BABASHKA_FEATURE_HTTPKIT_CLIENT="${BABASHKA_FEATURE_HTTPKIT_CLIENT:-false}"
    export BABASHKA_FEATURE_HTTPKIT_SERVER="${BABASHKA_FEATURE_HTTPKIT_SERVER:-false}"
    export BABASHKA_FEATURE_CORE_MATCH="${BABASHKA_FEATURE_CORE_MATCH:-false}"
    export BABASHKA_FEATURE_HICCUP="${BABASHKA_FEATURE_HICCUP:-false}"
    export BABASHKA_FEATURE_TEST_CHECK="${BABASHKA_FEATURE_TEST_CHECK:-false}"
    export BABASHKA_FEATURE_SPEC_ALPHA="${BABASHKA_FEATURE_SPEC_ALPHA:-false}"
    export BABASHKA_FEATURE_REWRITE_CLJ="${BABASHKA_FEATURE_REWRITE_CLJ:-false}"
    export BABASHKA_FEATURE_SELMER="${BABASHKA_FEATURE_SELMER:-false}"
fi

"$GRAALVM_HOME/bin/native-image" "${args[@]}"
