name: deploy

# on:
#   push:
#     tags:
#       - "*.*.*"

on: [push
   # , pull_request
   ]

jobs:
  # Initial task to compile a JAR, store as a pipeline artifact to be used by
  # downstream builders.

  jvm:
    # ubuntu 18.04 comes with lein + java8 installed
    runs-on: ubuntu-18.04
    steps:
      - name: Git checkout
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
          submodules: 'true'
      - name: Cache deps
        uses: actions/cache@v1
        id: cache-deps
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('project.clj') }}
          restore-keys: |
                ${{ runner.os }}-maven-

      - name: Fetch deps
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          lein deps

      - name: Run tests
        run: |
          script/test

      - name: Build into uberjar
        run: |
          lein with-profiles +reflection do run
          lein do clean, uberjar

      - name: Babashka version
        run: |
          VERSION=$(cat resources/BABASHKA_VERSION)
          echo "##[set-output name=version;]"

      - uses: actions/upload-artifact@v1
        with:
          path: target/babashka-${{ steps.babashka-version.outputs.version }}-standalone.jar
          name: babashka-${{ steps.babashka-version.outputs.version }}-standalone.jar

      - uses: actions/upload-artifact@v1
        with:
          name: reflection.json
          path: babashka-${{ steps.babashka-version.outputs.version }}-reflection.json

  linux:
    needs: [jvm]
    runs-on: ubuntu-18.04
    steps:
      - name: Git checkout
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
          submodules: 'true'

      - uses: actions/download-artifact@v1
        with:
          name: jar
          path: .

      - uses: actions/download-artifact@v1
        with:
          name: reflection.json
          path: .

      - name: Cache deps
        uses: actions/cache@v1
        id: cache-deps
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('project.clj') }}
          restore-keys: |
                ${{ runner.os }}-maven-

      - name: Cache GraalVM
        uses: actions/cache@v1
        id: cache-graalvm
        with:
          path: ~/graalvm-ce-java8-19.3.1
          key: ${{ runner.os }}-graalvm-19.3.1
          restore-keys: |
                ${{ runner.os }}-graalvm-19.3.1

      - name: Download GraalVM
        run: |
          cd ~
          if ! [ -d graalvm-ce-java8-19.3.1 ]; then
            curl -O -sL https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-19.3.1/graalvm-ce-java8-linux-amd64-19.3.1.tar.gz
            tar xzf graalvm-ce-java8-linux-amd64-19.3.1.tar.gz
          fi

      # Look up at releases here https://github.com/graalvm/graalvm-ce-builds/releases

      - name: Build Linux native image
        run: |
          export BABASHKA_JAR=${{ steps.parse-ref.outputs.base }}-standalone.jar
          export BABASHKA_BINARY=${{ steps.parse-ref.outputs.name }}
          export BABASHKA_XMX="-J-Xmx6g"
          export GRAALVM_HOME="$HOME/graalvm-ce-java8-19.3.1"
          script/compile

      - name: Test binary
        run: |
          BABASHKA_TEST_ENV=native script/test

      - name: Install clojure
        run: |
          script/install-clojure ~
          export PATH=/tmp/bin:$PATH

      - name: Test libraries
        run: |
          BABASHKA_TEST_ENV=native script/run_lib_tests

      - name: Babashka version
        run: |
          VERSION=$(cat resources/BABASHKA_VERSION)
          echo "##[set-output name=version;]"

      - uses: actions/upload-artifact@v1
        with:
          path: target/babashka-${{ steps.babashka-version.outputs.version }}-standalone.jar
          name: babashka-${{ steps.babashka-version.outputs.version }}-standalone.jar

      - uses: actions/upload-artifact@v1
        with:
          path: bb
          name: babashka-${{ steps.babashka-version.outputs.version }}-linux-amd64.zip

  # Use GraalVM on macOS to convert JAR to a native macOS binary
  mac:
    needs: [jvm]
    runs-on: macOS-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
          submodules: 'true'

      - uses: actions/download-artifact@v1
        with:
          name: jar
          path: .

      - uses: actions/download-artifact@v1
        with:
          name: reflection.json
          path: .

      - name: Parse Ref
        id: parse-ref
        run: |
          export VERSION="$(echo $GITHUB_SHA | head -c 7)" 
          export BASE=babashka-${VERSION}
          echo "##[set-output name=base;]${BASE}"
          echo "##[set-output name=name;]${BASE}-mac"

      - name: Cache GraalVM
        uses: actions/cache@v1
        id: cache-graalvm
        with:
          path: ~/graalvm-ce-java8-19.3.1
          key: ${{ runner.os }}-graalvm-19.3.1
          restore-keys: |
                ${{ runner.os }}-graalvm-19.3.1

      - name: Download GraalVM
        run: |
          cd ~
          if ! [ -d graalvm-ce-java8-19.3.1 ]; then
            curl -O -sL https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-19.3.1/graalvm-ce-java8-darwin-amd64-19.3.1.tar.gz
            tar xzf graalvm-ce-java8-darwin-amd64-19.3.1.tar.gz
          fi

      - name: Build Mac native image
        run: |
          export BABASHKA_JAR=${{ steps.parse-ref.outputs.base }}-standalone.jar
          export BABASHKA_BINARY=${{ steps.parse-ref.outputs.name }}
          export BABASHKA_XMX="-J-Xmx6g"
          export GRAALVM_HOME="$HOME/graalvm-ce-java8-19.3.1/Contents/Home"
          script/compile

      - name: Test binary
        run: |
          export BINARY=./${{ steps.parse-ref.outputs.name }}
          $BINARY -e '(println "OK")'

      - run: tar -cvzf ${{ steps.parse-ref.outputs.name }}.tgz ./${{ steps.parse-ref.outputs.name }}

      - uses: actions/upload-artifact@v1
        with:
          path: ${{ steps.parse-ref.outputs.name }}.tgz
          name: binary-mac
